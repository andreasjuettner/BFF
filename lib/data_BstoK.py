import numpy as np
import h5py
import lib.physical_constants as pc
from collections.abc import Iterable

def zfn(qsq,tp,t0):
 return (np.sqrt(1-qsq/tp)-np.sqrt(1-t0/tp))/(np.sqrt(1-qsq/tp)+np.sqrt(1-t0/tp))
def flatten(x):
    """flatten(sequence) -> list

    Returns a single, flat list which contains all elements retrieved
    from the sequence and all recursively contained sub-sequences
    (iterables).

    Examples:
    >>> [1, 2, [3,4], (5,6)]
    [1, 2, [3, 4], (5, 6)]
    >>> flatten([[[1,2,3], (42,None)], [4,5], [6], 7, MyVector(8,9,10)])
    [1, 2, 3, 42, None, 4, 5, 6, 7, 8, 9, 10]"""

    result = []
    if 2==1:
     for el in x:
         #if isinstance(el, (list, tuple)):
         if hasattr(el, "__iter__") and not isinstance(el, basestring):
             result.extend(flatten(el))
         else:
             result.append(el)
    else:
     for el in x:
         if isinstance(el, Iterable) and not isinstance(el, (str,bytes)):
             result.extend(flatten(el))
         else:
             result.append(el)
     
    return result

def make_b0(alpha,tp,t0,mpole,mpole0p,bpole,Kp,K0):
 z	 = zfn(0,tp,t0)
 a 	 = alpha[:Kp]
 b 	 = flatten([np.nan,alpha[Kp:]])
 fp      = np.sum(np.array([a[k]*(z**k-(-1)**(k-Kp)*k/Kp*z**Kp) for k in range(Kp)]),0)
 f0_bar0 = np.sum(np.array([b[k]*z**k for k in range(1,K0)]),0)
 b[0] 	 = fp-f0_bar0
 return b[0]

def sample_HPQCD14():
	np.random.seed(1231231)
	Kp=3
	K0=4
	val=np.array( [0.3680,-0.750,2.720,0.315,0.945,2.391])
	dval=np.array([0.0214,0.193,1.458 ,0.129,1.305,4.671])
	C=np.array([[ 4.577e-4,1.157e-3,-1.309e-3	,0.001165,0.009481,0.02963],	
		     [1.157e-3,3.721e-2,1.848e-1	,0.02140,0.2255,0.7472	],	
		     [-1.309e-3,1.848e-1,2.124	  	,0.1434,1.539,5.325	],	
		     [0.001165,0.02140,0.1434		,0.01676,0.1462,0.4453	],
		     [0.009481,0.2255 ,1.539 		,0.1462 ,1.702 ,5.852 	],
		     [0.02963 ,0.7472 ,5.325 		,0.4453,5.852 ,21.81	]])
	samples = np.random.multivariate_normal(val,C,10000)	
	#import ff_lib
	tp	= (pc.mBsphys+pc.mKphys)**2
	t0	= (pc.mBsphys+pc.mKphys)*(np.sqrt(pc.mBsphys)-np.sqrt(pc.mKphys))**2
	bvecall = np.empty((0,Kp+K0))
	for s in samples:
	 b0 = make_b0(s,tp,t0,[5.3252],[5.63],1,Kp,K0)
	 bvecall = np.r_['0',bvecall,[np.r_[s[:Kp],[b0],s[Kp:]]]]
	bvec = bvecall
	deltas = bvec - np.mean(bvec,0)
	return np.mean(bvec,0),np.dot(deltas.T,deltas)/bvec.shape[0]

# create synthetic data for HPQCD14
b_HPQCD14,C_HPQCD14=sample_HPQCD14()
data = {'FLAG21': {'Kp': 4, 'K0':3,'val': np.array([0.374  , -0.672 , 0.07   , 1.34   , 0.2203,0.089  , 0.24 ]),
			'dval': np.array([0.012   , 0.064   , 0.31    , 0.52    , 0.0068, 0.057   , 0.23 ]),
			'corr': np.array([[1 , 0.2471 , -0.1715 , -0.2396 , 0.6445 , 0.3791 , 0.2857] ,
			[0.2471 , 1 , 0.4198 , 0.1724 , 0.4626 , 0.8183 , 0.7948 ],
			[-0.1715 , 0.4198 , 1 , 0.8136 , 0.3804 , 0.7293 , 0.7481],
			[-0.2396 , 0.1724 , 0.8136 , 1 , 0.2823 , 0.5120 , 0.5529],
			[0.6445 , 0.4626 , 0.3804 , 0.2823 , 1 , 0.6570 , 0.4837 ],
			[0.3791 , 0.8183 , 0.7293 , 0.5120 , 0.6570 , 1 , 0.9220 ],
			[0.2857 , 0.7948 , 0.7481 , 0.5529 , 0.4837 , 0.9220 , 1 ]]),
			} }
data['HPQCD 14']={'Kp': 3, 'K0':4,
		     'val':b_HPQCD14,#np.array( [0.315,0.945,2.391,0.3680,-0.750,2.720]),
		     'dval':np.sqrt(np.diag(C_HPQCD14)),#np.array([0.129,1.305,4.671,0.0214,0.193,1.458]),
                     'cov':C_HPQCD14}#np.array([[0.01676,0.1462,0.4453,0.001165,0.02140,0.1434],
				     #[0.1462 ,1.702 ,5.852 ,0.009481,0.2255 ,1.539 ],
				     #[0.4453 ,5.852 ,21.81,0.02963 ,0.7472 ,5.325],
				     #[0.001165,0.009481,0.02963,4.577e-4,1.157e-3,-1.309e-3],
				     #[0.02140,0.2255,0.7472,1.157e-3,3.721e-2,1.848e-1],
				     #[0.1434,1.539,5.325,-1.309e-3,1.848e-1,2.124]]),
data['FNALMILC 19']={'Kp': 4, 'K0':4,
		     'val':np.array([0.3623,-0.9559,-0.8525,0.2785,0.1981,-0.1661,-0.6430,-0.3754]),
		     'dval':np.array([0.0178,0.1307, 0.4783,0.6892,0.0101,0.1130,0.4385,0.4535]),
                     'corr':np.array([   [ 1.     ,0.6023, 0.0326,-0.1288, 0.7122 ,0.6035, 0.5659, 0.5516],
					 [ 0.6023 ,1.    , 0.4735, 0.2677, 0.7518 ,0.9086, 0.9009, 0.8903],
					 [ 0.0326 ,0.4735, 1.    , 0.9187, 0.5833 ,0.7367, 0.734 , 0.7005],
					 [-0.1288 ,0.2677, 0.9187, 1.    , 0.4355 ,0.5553, 0.5633, 0.5461],
					 [ 0.7122 ,0.7518, 0.5833, 0.4355, 1.     ,0.8667, 0.7742, 0.7337],
					 [ 0.6035 ,0.9086, 0.7367, 0.5553, 0.8667 ,1.    , 0.9687, 0.9359],
					 [ 0.5659 ,0.9009, 0.734 , 0.5633, 0.7742 ,0.9687, 1.    , 0.9899],
					 [ 0.5516 ,0.8903, 0.7005, 0.5461, 0.7337 ,0.9359, 0.9899, 1.    ]]),
		      'fp':np.array([
                               [ 0.03362405914100728    ,0.3292060381005889     ,0.020821147569978906],
				[-0.023798736122628977  ,0.38456274618842196    ,0.016107854065513492],
				[-0.09818773217720439   ,0.44771203413093824    ,0.013385439927435178],
				[-0.2026827831488296    ,0.5193731805130803     ,0.01739430391962929]]),
		      'f0':np.array([
				[0.03362405914100728    ,0.19177398197172513    ,0.013964673906908752],
				[-0.023798736122628977  ,0.20169378757691733    ,0.008046661195984538],
				[-0.09818773217720439   ,0.20856104997830394    ,0.004807174140573495],
				[-0.2026827831488296    ,0.20843939322128338    ,0.00425161152300002]])	} 
data['RBCUKQCD 15']={'Kp':3,'K0':3,
	 	     'val':np.array([0.338,-1.161,-0.458,0.210,-0.169,-1.235]),
		     'dval':np.array([0.024,0.192,1.009,0.017,0.202,0.880]),
                     'corr':np.array([   [1.000,0.255, 0.146, 0.873, 0.603, 0.423],
					 [0.255,1.000, 0.823, 0.311, 0.954, 0.770],
					 [0.146,0.823, 1.000, 0.346, 1.060, 0.901],
					 [0.873,0.311, 0.346, 1.000, 0.556, 0.479],
					 [0.603,0.954, 1.060, 0.556, 1.000, 0.965],
					 [0.423,0.770, 0.901, 0.479, 0.965, 1.000]]),
		      'fp':np.array([
				[-0.021656575625779235,0.3754379614374611,0.02327715360912259],
				[-0.10107781305153783,0.4368353845589229,0.024025946150740756],
				[-0.19017148436548137,0.48380382142179534,0.02564160253535515]]),
		      'f0':np.array([
				[-0.021656575625779235,0.21814719301725843,0.015437671284527195],
				[-0.10107781305153783,0.2238305891688157,0.014979936386008634],
				[-0.19017148436548137,0.22250495933346565,0.015187491591026227]])	} 
